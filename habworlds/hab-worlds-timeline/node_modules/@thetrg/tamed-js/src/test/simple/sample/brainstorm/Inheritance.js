tm.add ('test.simple.OverrideMethods', function (o, p, d) {
    // Set internal values from config.
    d.name = d._config.name;
    d.age = parseInt (d._config.age);

    // Unique methods.
    function modifyAge (years) {
        return d.age + years;
    }

    // Shared methods.
    o.getAge = function () {
    }

    o.getName = function () {
    }

    // Override methods.
    o._override.getAge = function (supr, p1, p2, p3) {
    }

    return o;

    // o.override = {
    //     getName: function () {
    //     },
    //     getAge: function () {
    //     }
    // }
    // return o;
});


// Go through each compare that the methods still match the original.
// NOTE: This will probably will be slow and is a case for inheritance.

// Go through the overrdide object and make sure...
function a () {
    // some code...
}

// override?
function a1 () {
    // some new code...
}

function wrapper (a, a1) {
    function () {
        var args = Array.prototype.slice.call (arguments);
        args = [a].concat (args);
        a1.apply (this, args);
    }
}
