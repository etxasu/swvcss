'use strict';
tm.add ('trg.loader.simple.type.AjaxLoader', function (o, p, d) {
    p.onLoad = function (data) {
        tm.setContent ({
            alias: d.alias,
            content: data,
            name: d.url,
            queue: d.queue,
        })

        d.queue.done (o);
    }

    o.setup = function (config) {
        d.alias = config.alias;
        d.url = config.url;
        d.queue = config.queue;
        o.load ();
    }

    o.getLoadInfo = function () {
        return d.info;
    }

    o.getUrl = function () {
        return d.url;
    }

    o.load = function (data) {
        $.ajax ({
            url: d.url,
        }).done (function (data) {
            p.onLoad (data);
        })
        .fail (function () {
            var info;
            info = {
                message: 'Unable to load file: ' + d.url,
                url: d.url,
            }

            console.error (info.message)
            d.queue.done (o, info);
        })
    }
})

'use strict';
tm.add ('trg.loader.simple.type.HandleBars', ['trg.loader.simple.type.AjaxLoader'], function (o, p, d) {
    function parseId (data) {
        var id;

        // Parse out the id and the template.
        if (data.substring (0, 4) === '<!--' && data.indexOf ('-->') > -1) {
            id = data.substring (0, (data.indexOf ('-->') + 3));
            id = id.replace ('<!--', '').replace ('-->', '').trim ();
            data = data.substring (data.indexOf ('-->') + 3).trim ();
        }
        else {
            id = d.url;
        }

        // Return the parsed template string.
        return {
            id: id,
            template: data,
        }
    }

    p.override ({
        onLoad: function (original, data) {
            var id;

            d.info = parseId (data);
            tm.addHtml (d.info.id, d.info.template);
            original (data);
        }
    })
})

'use strict';
tm.add ('trg.loader.simple.type.Text', ['trg.loader.simple.type.AjaxLoader'], function (o, p, d) {
})

'use strict';
tm.add ('trg.loader.simple.Cache', function (o, p, d) {
    o.setup = function () {
        d.cache = {};
        d.alias = {};
    }

    o.setContent = function (data) {
        var error, queue;

        queue = data.queue;
        if (d.cache [data.name] === undefined || d.cache [data.name] === -1) {
            d.cache [data.name] = data.content;

            if (data.alias) {
                if (!d.alias [data.alias]) {
                    d.alias [data.alias] = data.content;
                }
                else {
                    error = {
                        message: 'File alias "' + data.alias + '" for the file "' + data.name + '" is already in used. Alias will be ignored.',
                        url: data.name,
                        alias: data.alias,
                    }
                    if (queue) { queue.addError (error); }
                    console.error (error.message);
                }
            }
        }
        else {
            error = {
                message: 'File content already loaded for: ' + data.name,
                url: data.name,
                alias: data.alias,
            }
            if (queue) { queue.addError (error); }
            console.error (error.message);
        }
    }

    o.getContent = function (name) {
        var item;
        item = d.cache [name];
        if (!item) {
            item = d.alias [name];
        }
        return item;
    }
})

'use strict';
tm.add ('trg.loader.simple.LoadByType', function (o, p, d) {
    function load (item) {
        var url;

        url = item.getUrl ()
        if (!d.manifest [url]) {
            d.manifest [url] = {
                status: 'loading',
                item: item,
            };
        }
    }

    p.loadEachType = function () {
        var alias, content, end, extension, i, item, list, type, url;

        list = d.loadData.nonJsList;
        end = list.length;

        for (i = 0; i < end; i++) {
            item = list [i];

            url = item;
            if (tm.getType (item) === 'Object') { url = item.url }
            if (item.alias) { alias = item.alias; }
            if (item.as) { alias = item.as; }

            extension = url.substring (url.lastIndexOf ('.') + 1);
            type = d.extensionMap [extension];

            if (type) {
                content = tm.getContent (url);

                if (content === undefined) {
                    tm.setContent ({name: url, content: -1});
                    load (tm.new (type, {
                        alias: alias,
                        queue: o,
                        url: url,
                    }))
                }
                else {
                    console.warn ('Already tried to load file: ' + url);
                }
            }
            else {
                throw new Error ('Loader unable to load an handle unknown file type: ' + extension + '. Please see if a loader file type exists for it.');
            }
        }

        // Check if we are done and callbacks should be run.
        p.allDone ();
    }

    o.setup = function () {
        d.extensionMap = {
            hbs: 'trg.loader.simple.type.HandleBars',
            txt: 'trg.loader.simple.type.Text',
        }
    }
})

'use strict';
tm.add ('trg.loader.simple.LoaderQueue', ['trg.loader.simple.LoadByType'], function (o, p, d) {
    p.allDone = function () {
        var done, info;

        if (d.loadCount >= Object.keys (d.manifest).length) {
            d.loadData.contentQueue = d.manifest;
            done = d.doneCallback;

            if (Array.isArray (done)) {
                done.forEach (function (item) {
                    item (d.loadData);
                })
            }
            else {
                done (d.loadData);
            }
        }
    }

    o.setup = function () {
        d.manifest = {};
        d.loadCount = 0;
        d.doneCallback = null;
    }

    o.addError = function (err) {
        d.loadData.errorList.push (err);
    }

    o.done = function (doneItem, err) {
        var item, url;

        url = doneItem.getUrl ();
        item = d.manifest [url];
        if (item && item.item == doneItem && item.status !== 'done') {
            item.status = 'done';
            d.loadCount++;

            // Add any errors found.
            if (err) {
                d.loadData.errorList.push (err);
            }
            else {
                d.loadData.loaded [url] = true;
            }
        }

        // Check if we are done and callbacks should be run.
        p.allDone ();
    }

    o.load = function (data) {
        d.loadData = data;
        d.doneCallback = d.loadData.done;

        d.loadData.done = null;
        delete d.loadData.done;

        if (d.loadData.nonJsList.length) {
            p.loadEachType ();
        }
        else {
            p.allDone ();
        }
    }
})

'use strict';
tm.add ('trg.loader.simple.Loader', ['trg.loader.simple.Cache'], function (o, p, d) {
    o.setup = function () {
        d.loadList = [];
    }

    o.load = function (data) {
        var queue;

        queue = tm.new ('trg.loader.simple.LoaderQueue');
        queue.load (data);
        d.loadList.push (queue);
    }
})


'use strict';
tm.start (function () {
    // Set the loader to load first.
    tm.load ({
        setLoader: true,
        list: [],
        done: function () {
            console.log ('- Using the Tamed Simple Loader.')
            tm.setLoader (tm.new ('trg.loader.simple.Loader'))
        }
    });
})
