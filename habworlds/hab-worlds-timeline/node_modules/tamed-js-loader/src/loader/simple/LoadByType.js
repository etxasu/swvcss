'use strict';
tm.add ('trg.loader.simple.LoadByType', function (o, p, d) {
    function load (item) {
        var url;

        url = item.getUrl ()
        if (!d.manifest [url]) {
            d.manifest [url] = {
                status: 'loading',
                item: item,
            };
        }
    }

    p.loadEachType = function () {
        var alias, content, end, extension, i, item, list, type, url;

        list = d.loadData.nonJsList;
        end = list.length;

        for (i = 0; i < end; i++) {
            item = list [i];

            url = item;
            if (tm.getType (item) === 'Object') { url = item.url }
            if (item.alias) { alias = item.alias; }
            if (item.as) { alias = item.as; }

            extension = url.substring (url.lastIndexOf ('.') + 1);
            type = d.extensionMap [extension];

            if (type) {
                content = tm.getContent (url);

                if (content === undefined) {
                    tm.setContent ({name: url, content: -1});
                    load (tm.new (type, {
                        alias: alias,
                        queue: o,
                        url: url,
                    }))
                }
                else {
                    console.warn ('Already tried to load file: ' + url);
                }
            }
            else {
                throw new Error ('Loader unable to load an handle unknown file type: ' + extension + '. Please see if a loader file type exists for it.');
            }
        }

        // Check if we are done and callbacks should be run.
        p.allDone ();
    }

    o.setup = function () {
        d.extensionMap = {
            hbs: 'trg.loader.simple.type.HandleBars',
            txt: 'trg.loader.simple.type.Text',
        }
    }
})
