'use strict';
tm.add ('trg.loader.simple.LoaderQueue', ['trg.loader.simple.LoadByType'], function (o, p, d) {
    p.allDone = function () {
        var done, info;

        if (d.loadCount >= Object.keys (d.manifest).length) {
            d.loadData.contentQueue = d.manifest;
            done = d.doneCallback;

            if (Array.isArray (done)) {
                done.forEach (function (item) {
                    item (d.loadData);
                })
            }
            else {
                done (d.loadData);
            }
        }
    }

    o.setup = function () {
        d.manifest = {};
        d.loadCount = 0;
        d.doneCallback = null;
    }

    o.addError = function (err) {
        d.loadData.errorList.push (err);
    }

    o.done = function (doneItem, err) {
        var item, url;

        url = doneItem.getUrl ();
        item = d.manifest [url];
        if (item && item.item == doneItem && item.status !== 'done') {
            item.status = 'done';
            d.loadCount++;

            // Add any errors found.
            if (err) {
                d.loadData.errorList.push (err);
            }
            else {
                d.loadData.loaded [url] = true;
            }
        }

        // Check if we are done and callbacks should be run.
        p.allDone ();
    }

    o.load = function (data) {
        d.loadData = data;
        d.doneCallback = d.loadData.done;

        d.loadData.done = null;
        delete d.loadData.done;

        if (d.loadData.nonJsList.length) {
            p.loadEachType ();
        }
        else {
            p.allDone ();
        }
    }
})
