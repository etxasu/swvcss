'use strict';
describe ('Tamed Simple Loader', function() {
    it ('should replace the default TamedJs loader.')
    it ('should allow loading of a single file.', function (done) {
        var item, url;

        url = '/src/test/sample/generic.txt';
        tm.load ({
            list: [
                url,
            ],
            done: function (data) {
                expect (data.contentQueue).to.exist;
                expect (data.loaded [url]).to.equal (true);
                expect (Object.keys (data.loaded)).to.have.lengthOf (1);

                item = data.contentQueue [url];
                expect (item).to.exist;
                expect (item.status).to.equal ('done');
                expect (tm.getContent (url)).to.equal ('sample text file\n');

                done ();
            }
        });
    })
    it ('should throw error if file type is unknown.', function (done) {
        try {
            tm.load ({
                list: [
                    '/src/test/sample/generic.error',
                ],
                done: function (data) {
                }
            });
        }
        catch (err) {
            expect (err.message).to.equal ('Loader unable to load an handle unknown file type: error. Please see if a loader file type exists for it.')
            done ();
        }
    })
    it ('should provide error details when loading error found.', function (done) {
        var item, url;

        url = '/src/test/sample/no-file.txt';
        tm.load ({
            list: [
                url,
            ],
            done: function (data) {
                expect (data.errorList).to.have.lengthOf (1);

                item = data.errorList [0];
                expect (item.message).to.equal ('Unable to load file: /src/test/sample/no-file.txt');
                expect (item.url).to.equal (url);
                expect (data.loaded [url]).to.equal (undefined);
                expect (Object.keys (data.loaded)).to.have.lengthOf (0);
                done ();
            }
        });
    })
    it ('should use an alias for a file when provided.', function (done) {
        var urlList;

        urlList = [
            {url: '/src/test/sample/generic3.txt', as: 'generic3'},
            {url: '/src/test/sample/generic4.txt', alias: 'generic4'},
        ];
        tm.load ({
            list: urlList,
            done: function (data) {
                expect (tm.getContent ('generic3')).to.equal ('sample file 3\n')
                expect (tm.getContent ('generic4')).to.equal ('sample file 4\n')
                done ();
            }
        });
    })
    it ('should create error if the file alias is already in use.', function (done) {
        var urlList;

        urlList = [
            {url: '/src/test/sample/generic3.txt', as: 'generic3'},
            {url: '/src/test/sample/generic4.txt', alias: 'generic4'},
            {url: '/src/test/sample/generic5.txt', as: 'generic3'},
        ];

        tm.load ({
            list: urlList,
            done: function (data) {
                expect (data.errorList).to.have.lengthOf (1);
                expect (data.errorList [0].message).to.equal ('File alias "' + urlList [2].as + '" for the file "' + urlList [2].url + '" is already in used. Alias will be ignored.')
                done ();
            }
        });
    })
    it ('should not load a duplicate files.', function (done) {
        var url, urlList;

        urlList = [
            '/src/test/sample/generic2.txt',
            '/src/test/sample/generic2.txt',
            '/src/test/sample/generic2.txt',
        ];
        tm.load ({
            list: urlList,
            done: function (data) {
                expect (data.errorList).to.have.lengthOf (0);
                expect (data.list).to.have.lengthOf (3);
                expect (data.loaded [urlList [0]]).to.equal (true);
                expect (Object.keys (data.loaded)).to.have.lengthOf (1);
                // done ();

                tm.load ({
                    list: [
                        '/src/test/sample/generic2.txt'
                    ],
                    done: function (data) {
                        expect (data.errorList).to.have.lengthOf (0);
                        expect (Object.keys (data.loaded)).to.have.lengthOf (0);
                        done ();
                    }
                });
            }
        });

        tm.load ({
            list: [
                '/src/test/sample/generic2.txt'
            ],
            done: function (data) {
                expect (data.errorList).to.have.lengthOf (0);
                expect (Object.keys (data.loaded)).to.have.lengthOf (0);
            }
        });
    })
    it ('should allow loading of a multiple files.')

    describe ('Loading a Handlebars file.', function () {
        it ('should allow loading of a handlebars file.', function (done) {
            var info, item, url;

            url = '/src/test/sample/handlebars/Generic.hbs';
            tm.load ({
                list: [
                    url,
                    '/src/test/sample/generic2.txt',
                ],
                done: function (data) {
                    item = data.contentQueue [url].item;
                    expect (item.getUrl ()).to.equal (url);

                    info = item.getLoadInfo ();
                    expect (info.id).to.equal (url);
                    expect (info.template).to.equal ([
                        '<p>Simple File</p>',
                        '',
                    ].join ('\n'));

                    done ();
                }
            });
        })
        it ('should load file with id defined on first line', function (done) {
            var info, item, urlList;

            urlList = [
                '/src/test/sample/handlebars/IdFirstLine.hbs',
                '/src/test/sample/handlebars/IdSecondLine.hbs',
                '/src/test/sample/handlebars/MultipleComments.hbs',
            ]

            tm.load ({
                list: urlList,
                done: function (data) {
                    expect (data.contentQueue).to.exist;

                    item = data.contentQueue [urlList [0]].item;
                    info = item.getLoadInfo ();
                    expect (info.id).to.equal ('trg.loader.test.sample.handlebars.IdFirstLine');

                    item = data.contentQueue [urlList [1]].item;
                    info = item.getLoadInfo ();
                    // console.log ('*** DATA:', item);
                    // console.log ('*** DATA:', info);
                    expect (info.id).to.equal (urlList [1]);

                    item = data.contentQueue [urlList [2]].item;
                    info = item.getLoadInfo ();
                    expect (info.id).to.equal ('trg.loader.test.sample.handlebars.MultipleComments');

                    done ();
                }
            });
        })
    })

    describe ('Loading an Image file.', function () {
        it ('should load a jpg file.')
        it ('should load a png file.')
        it ('should load a gif file.')
    })

    describe ('Loading an Audio file.', function () {
        it ('should load an mp3 file.')
        it ('should load a wav file.')
        it ('should load a ogg file.')
    })
});
