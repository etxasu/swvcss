tm.add ('ui.keyboard.TimePicker', ['ui.keyboard.timepicker.Column', 'ui.keyboard.timepicker.Time'], function (o, p, d) {
    // Unique methods.

    // Public shared methods.
    o.setup = function (config) {
        d.dom = null;
        d.classSelected = 'column-selected';
    }

    o.keyUp = function (data) {
        var increment;

        increment = 1;
        d.dom = data.dom;
        switch (data.key) {
            case 'up':
            case 'down':
                console.log ('*** HERE...');
                break;

            case 'left':
                increment = -1;
            case 'right':
                p.cycleColumn ({increment: increment});
                break;
        }
    }
})


tm.add (
    'ui.keyboard.TimePicker',
    ['ui.keyboard.timepicker.Column', 'ui.keyboard.timepicker.Time'],
    '/some/server/url/file.html',
    function (o, p, d) {}
)

// tm.html ('ui.keyboard.TimePicker', [].join ())
tm.html ('ui.keyboard.TimePicker', '<div>{{ value }}</div>')
tm.html ('ui.keyboard.TimePicker', null, '/some/server/url/file.html')
tm.html ('ui.keyboard.TimePicker', null, '/some/server/url/file.html')


tm.load ({
    list: [
        '/some/server/url/TimePicker.js',
        '/some/server/url/TimePicker.hbs',
        '/some/server/url/TestArea.js',
        '/some/server/url/TestArea.hbs',
        '/some/server/url/Goomba.png',
        '/some/server/url/PowerUp.mp3',
    ]
})

// ui.keyboard.TimePicker
<div>{{ value }}</div>

/*
// The repo will include two loaders:
    - Loader
        - This will include a loader that is just a list, like the normal loader
            but will allow for other items to be loaded, not just js file.
            - Keeping things simple
            - With .hbs files:
                - Get the file name
                - Load the file
                - Determine the file id
    - Lazy Loader
        - This will include a more complex loader that will allow for the reading
            in of files that can be serialized and the required files to be determined
            and a dependency graph to be built.

        - The .hbs files might involve a two stage loading.
            - Load listed assets
                - When those assets are loaded, load any referenced html file

- What do we do about loading through a dependency graph?
    - Can the graph be pre-determined? Built at build / compile time?
- The default and normal behavior should be to have one big dependency list.
    - The list can then be compiled into on big js, css, text file.
*/
